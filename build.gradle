plugins {
    id 'java'
    id 'c'
    id 'maven'
    id 'maven-publish'
    id 'signing'
}

group 'tech.bsdb'
archivesBaseName = "bsdb-core"
version '0.1.2'

sourceCompatibility = 1.9

compileJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn", "--add-exports", "java.base/sun.nio.ch=ALL-UNNAMED"]
}
compileTestJava {
    options.warnings = false
    options.deprecation = false
    options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-nowarn", "--add-exports", "java.base/sun.nio.ch=ALL-UNNAMED"]
}
javadoc {
    //options.JFlags += ["--add-exports", "java.base/sun.nio.ch=ALL-UNNAMED"]
    exclude "tech/bsdb/io/*"
    exclude "com/*"
    exclude "it/*"

}

tasks.withType(JavaCompile) {
    println 'Compiler args: ' + options.compilerArgs
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.13.1'

    implementation (group: 'org.xerial.larray', name: 'larray_2.12', version: '0.4.0'){
        exclude group: 'ch.qos.logback'
    }
    implementation 'org.xerial.larray:larray-mmap:0.4.1'

    implementation 'com.conversantmedia:disruptor:1.2.16'

    implementation 'com.github.luben:zstd-jni:1.5.5-9'

    implementation 'it.unimi.dsi:sux4j:5.4.1'

    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-configuration2:2.9.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    implementation 'org.apache.parquet:parquet-hadoop-bundle:1.13.1'
    compileOnly 'org.apache.hadoop:hadoop-common:3.2.4'

    implementation 'io.netty:netty-all:4.1.99.Final'

    implementation 'org.msgpack:msgpack-core:0.9.6'

    implementation 'com.google.guava:guava:32.0.0-jre'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.3'

}

test {
    testLogging.showStandardStreams = true
    systemProperty "java.library.path", file("${buildDir}/libs/bsdbjni/shared").absolutePath
}


processResources {
    from "${buildDir}/libs/bsdbjni/shared/"
}



task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}


model {
    buildTypes {
        release
    }

    binaries {
        all {
            if (toolChain in Gcc) {
                cCompiler.args "-O2"
                linker.args "-shared", "-fPIC",  "-luring"
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                headers.srcDirs "${System.properties['java.home']}/include",
                        "${System.properties['java.home']}/include/win32",
                        "${System.properties['java.home']}/include/darwin",
                        "${System.properties['java.home']}/include/linux"
            }

	    liburing {
                headers.srcDirs "${System.getenv("LIBURING_PATH")}/src",
                        "${System.getenv("LIBURING_PATH")}/src/include",
                        "${System.getenv("LIBURING_PATH")}/src/include/liburing"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${System.getenv("LIBURING_PATH")}/src/liburing.so")
                }
            }
        }
    }

    platforms {
        x64 { architecture "x86_64" }
    }

    components {
        bsdbjni(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        lib library: 'bsdbjni', linkage: 'static'
                        lib library: 'liburing', linkage: 'api'
                        lib library: 'jdk', linkage: 'api'
                        srcDir "src/main/c"
                        include "**/*.c"
                    }
                }
            }
        }
    }
}


task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'ai.bsdb.tools.Builder'
    }
    archiveName = 'bsdb-jar-with-dependencies-' + version + '.jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'tech.bsdb:bsdb-core'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A build&serve style readonly KV store'
                url 'https://github.com/yc-huang/bsdb'
                scm {
                    connection 'scm:git:git://github.com/yc-huang/bsdb.git'
                    developerConnection 'scm:git:ssh://github.com/yc-huang/bsdb.git'
                    url 'http://github.com/yc-huang/bsdb/tree/master'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'YC'
                        name 'YC Huang'
                        email 'ychuang.cn@gmail.com'
                    }
                }
            }
        }
    }
}

build.dependsOn("bsdbjniSharedLibrary")
test.dependsOn("bsdbjniSharedLibrary")
processResources.dependsOn("bsdbjniSharedLibrary")
